<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jeu : Le Taquin</title>
    <style>
        body { font-family: 'Helvetica', sans-serif; display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; background-color: #f0f0f0; }
        .game-container { text-align: center; }
        #puzzle-container { position: relative; width: 400px; height: 400px; border: 2px solid #333; background-color: #ddd; margin: 1rem auto; }
        .tile { position: absolute; width: 96px; height: 96px; background-color: #4a90e2; color: white; font-size: 2.5rem; font-weight: bold; display: flex; align-items: center; justify-content: center; border: 2px solid #fff; cursor: pointer; transition: top 0.2s ease, left 0.2s ease; user-select: none; }
        .tile.empty { background-color: transparent; border: none; cursor: default; }
        .controls { margin-top: 1rem; }
        .button { font-size: 1rem; padding: 0.5rem 1rem; margin: 0.5rem; border-radius: 5px; border: 1px solid #ccc; cursor: pointer; }
        #message-box { margin-top: 1rem; height: 2rem; font-weight: bold; color: green; }
        @media (max-width: 450px) {
            #puzzle-container { width: 320px; height: 320px; }
            .tile { width: 76px; height: 76px; border: 2px solid #fff; }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Jeu du Taquin</h1>
        <p>Remettez les nombres dans l'ordre de 1 à 15.</p>
        <div id="puzzle-container"></div>
        <div id="message-box"></div>
        <div class="controls">
            <button id="reset-button" class="button">Mélanger</button>
            <a href="../index.html" class="button" style="text-decoration: none; background-color: #4a5568; color: white;">Accueil</a>
        </div>
        <p>Mouvements: <span id="move-count">0</span></p>
        <footer style="margin-top: 2rem; color: #718096;">Créé par Chrice</footer>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('puzzle-container');
            const resetButton = document.getElementById('reset-button');
            const moveCountSpan = document.getElementById('move-count');
            const messageBox = document.getElementById('message-box');

            const gridSize = 4;
            let tiles = [];
            let emptyTile = { row: 3, col: 3 };
            let moveCount = 0;

            function createTile(number, row, col) {
                const tile = document.createElement('div');
                tile.className = 'tile';
                if (number === gridSize * gridSize) {
                    tile.classList.add('empty');
                } else {
                    tile.textContent = number;
                }
                tile.dataset.number = number;
                tile.style.left = `${col * 100}px`;
                tile.style.top = `${row * 100}px`;
                tile.addEventListener('click', () => onTileClick(tile, row, col));
                return { element: tile, row, col, number };
            }

            function onTileClick(tileElement, row, col) {
                const dRow = Math.abs(row - emptyTile.row);
                const dCol = Math.abs(col - emptyTile.col);

                if (dRow + dCol === 1) { // Est adjacent à la case vide
                    const clickedTile = tiles.find(t => t.row === row && t.col === col);
                    
                    // Swap positions in logic
                    [clickedTile.row, emptyTile.row] = [emptyTile.row, clickedTile.row];
                    [clickedTile.col, emptyTile.col] = [emptyTile.col, clickedTile.col];
                    
                    // Swap positions in DOM
                    tileElement.style.left = `${clickedTile.col * 100}px`;
                    tileElement.style.top = `${clickedTile.row * 100}px`;

                    const emptyElement = container.querySelector('.empty');
                    emptyElement.style.left = `${emptyTile.col * 100}px`;
                    emptyElement.style.top = `${emptyTile.row * 100}px`;
                    
                    moveCount++;
                    moveCountSpan.textContent = moveCount;
                    checkWin();
                }
            }

            function shuffle() {
                // Fait un grand nombre de mouvements aléatoires valides pour mélanger
                let shuffles = 100;
                while (shuffles > 0) {
                    const neighbors = [];
                    const { row, col } = emptyTile;
                    if (row > 0) neighbors.push({ r: row - 1, c: col });
                    if (row < gridSize - 1) neighbors.push({ r: row + 1, c: col });
                    if (col > 0) neighbors.push({ r: row, c: col - 1 });
                    if (col < gridSize - 1) neighbors.push({ r: row, c: col + 1 });

                    const randomNeighbor = neighbors[Math.floor(Math.random() * neighbors.length)];
                    const tileToMove = tiles.find(t => t.row === randomNeighbor.r && t.col === randomNeighbor.c);
                    onTileClick(tileToMove.element, tileToMove.row, tileToMove.col);
                    moveCount = 0; // Reset move count after shuffling
                    moveCountSpan.textContent = moveCount;
                    shuffles--;
                }
            }
            
            function checkWin() {
                for (const tile of tiles) {
                    if (tile.number !== (tile.row * gridSize + tile.col + 1)) {
                        return;
                    }
                }
                messageBox.textContent = "Bravo, vous avez gagné !";
            }

            function init() {
                container.innerHTML = '';
                tiles = [];
                emptyTile = { row: gridSize - 1, col: gridSize - 1 };
                moveCount = 0;
                messageBox.textContent = '';
                moveCountSpan.textContent = moveCount;

                for (let i = 0; i < gridSize * gridSize; i++) {
                    const row = Math.floor(i / gridSize);
                    const col = i % gridSize;
                    const tile = createTile(i + 1, row, col);
                    tiles.push(tile);
                    container.appendChild(tile.element);
                }
                setTimeout(shuffle, 100); // Shuffle after a short delay
            }

            resetButton.addEventListener('click', init);
            init();
        });
    </script>
</body>
</html>
